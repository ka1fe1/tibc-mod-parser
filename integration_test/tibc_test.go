package integration

import (
	"encoding/hex"
	"fmt"
	. "github.com/kaifei-bianjie/common-parser/codec"
	"github.com/kaifei-bianjie/common-parser/utils"
)

func (s IntegrationTestSuite) TestTIBC() {
	cases := []SubTest{
		{
			"TIBCNftTransfer",
			TIBCNftTransfer,
		},
		{
			"TIBCRecvPacket",
			TIBCRecvPacket,
		},
		{
			"TIBCUpdateClient",
			TIBCUpdateClient,
		},
		{
			"TIBCAcknowledgement",
			TIBCAcknowledgement,
		},
		{
			"TIBCCleanPacket",
			TIBCCleanPacket,
		},
		{
			"TIBCRecvCleanPacket",
			TIBCRecvCleanPacket,
		},
	}

	for _, t := range cases {
		s.Run(t.testName, func() {
			t.testCase(s)
		})
	}
}

func TIBCNftTransfer(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func TIBCRecvPacket(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString("")
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func TIBCUpdateClient(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func TIBCAcknowledgement(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func TIBCCleanPacket(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func TIBCRecvCleanPacket(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}
