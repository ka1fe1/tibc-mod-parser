package integration

import (
	"encoding/hex"
	"fmt"
	. "github.com/kaifei-bianjie/common-parser/codec"
	"github.com/kaifei-bianjie/common-parser/utils"
)

func (s IntegrationTestSuite) TestTIBC() {
	cases := []SubTest{
		{
			"TIBCNftTransfer",
			TIBCNftTransfer,
		},
		{
			"TIBCRecvPacket",
			TIBCRecvPacket,
		},
		{
			"TIBCUpdateClient",
			TIBCUpdateClient,
		},
		{
			"TIBCAcknowledgement",
			TIBCAcknowledgement,
		},
		{
			"TIBCCleanPacket",
			TIBCCleanPacket,
		},
		{
			"TIBCRecvCleanPacket",
			TIBCRecvCleanPacket,
		},
	}

	for _, t := range cases {
		s.Run(t.testName, func() {
			t.testCase(s)
		})
	}
}

func TIBCNftTransfer(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func TIBCRecvPacket(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString("")
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func TIBCUpdateClient(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString("")
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func TIBCAcknowledgement(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString("0AB7070AB4070A272F746962632E636F72652E7061636B65742E76312E4D736741636B6E6F776C656467656D656E741288070A9E01080212034E46541A0A697269736875622D7161220E62736E6875622D6D61696E6E657432790A04706E7A6E120777687A657A6D661A0E687474703A2F2F6269656A767961222A696161316571766B667468747272393367347039717370703534773664746A74726E32376172377270772A2A69616131343863613266766C7574397A303663397967787739706772716E32717063717532383732396A30011204AA0101011AAC050AA9030AA6030A2A61636B732F697269736875622D71612F62736E6875622D6D61696E6E65742F73657175656E6365732F321220E2E240ED1D7B1EE6BE77E9101B573C90800CF8D61D6EFF892F9D7D987CCC33831A0D0801180120012A050002B28802222B080112270204B288022093C74F7E9F58D47CB7B3B45C5F4AB7C4644892DDC60D042DED5AEE75B781215220222D080112060408B28802201A2120A13C19BBA8E3FA0EE0940EEA516DA399A4CFAF52982B0CDEA774D7AA670F5B43222D080112060812B28802201A2120A6D68E2A7047D6AE507F33E12D85E18F12F09CE4445D2FB7F5C54F7A1C766AB1222D080112060A2CB28802201A2120CC18F02B5648C12A3896F5D8A288643FC36C5BA35EEC7FD5797A1DAC929CE2C4222D080112060C60B28802201A21206C8A8CCBC8C0C1D5E178841B42910C55B5AD399A98D3D9DBAC51A811CE6F58AF222E080112070EAE01B28802201A2120CA35F92F69A3D1E12DE163932E4A69766AB97CB144C0CB920E1E57ED1F221028222E0801120710A002B28802201A21207719749C7C75E976A59942248052F9D36CC1D17F850E7306DD261122742006250AFD010AFA010A04746962631220FCECB3B20FD69E8F4995A18E77777E3CBD6C805D19FE2299CE88AA0264C244271A090801180120012A0100222508011221016B2DB9110F4DBA1EC725BF8F700C0DC5103B512A22BCEEB261ECFAE4E5B7350C222708011201011A2047C03F1071EBDC9BF307A17367E08070EF34E210561B3C4A8116109337EFFDC722250801122101751C89592E55B6C81747F54BBD3494ABEE8941AE5705259FBC1D55F28A150245222708011201011A20F807BDF7CA6BC5E8B99ECF2C0946589596BCDD12EB15910A117D56BC1812635B2225080112210134B2708A3E2AB51F8612C625B33663BAC12CEF3FAE076159257DF128A55B83982204109A84012A2A6961613137636A64673633746879327666717676676A356C667635647033333974306C7261326771387512680A510A460A1F2F636F736D6F732E63727970746F2E736563703235366B312E5075624B657912230A2102A53EA4DC106AE521C8354FD35F57149A9EEC9530332D2D6C53C80BB3F323A7D412040A02080118D12212130A0C0A05756972697312033130301080C2D72F1A40287147DE3996800A7D37245F223062320DB9F4E37DB5E270292FB8F599A13E802AC54AE8C4DD76321501F9D508A361B66E28333426A899BF49A5DB705C503869")
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func TIBCCleanPacket(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}

func TIBCRecvCleanPacket(s IntegrationTestSuite) {
	SetBech32Prefix(Bech32PrefixAccAddr, Bech32PrefixAccPub, Bech32PrefixValAddr,
		Bech32PrefixValPub, Bech32PrefixConsAddr, Bech32PrefixConsPub)

	txBytes, err := hex.DecodeString
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		s.T().Log(err.Error())
		panic(err)
	}

	for _, msg := range authTx.GetMsgs() {
		if mtDoc, ok := s.Tibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(mtDoc))
		}
	}
}
